import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';
import { formatLargeNumber } from 'src/app/utils/valueManipulation';

@Component({
  selector: 'app-stock-key-metrics',
  templateUrl: './stock-key-metrics.component.html',
  styleUrls: ['./stock-key-metrics.component.css']
})
export class StockKeyMetricsComponent {
  constructor() {}

  @Input() stockName: string = ''
  @Input() fiscalYears: string[] = []
  @Input() allMetrics: any[][] = []
  @Input() profitable: boolean = false
  @Input() growingRevenue: boolean = false

  displayedMetric: string = ''
  displayedDefinition: string = ''

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['allMetrics'].previousValue != undefined && changes['allMetrics']?.currentValue != changes['allMetrics']?.previousValue) {
      this.allMetrics = changes['allMetrics']?.currentValue;
      this.profitable = changes['profitable']?.currentValue;
      this.growingRevenue = changes['growingRevenue']?.currentValue;
    } else {
      this.profitable = changes['profitable']?.currentValue;
      this.growingRevenue = changes['growingRevenue']?.currentValue;
    }
  }

  renderDefinition(metric: string) {
    let metricToDefine = metric

    switch (metricToDefine) {
      case 'Total Revenue':
        this.displayedMetric = 'Total Revenue'
        this.displayedDefinition = 'A key financial metric that indicates the overall income generated y the company before deducting any expenses, taxes, or interest. This is the best metric to determine if a companies core product sales are growing or shrinking.'
        break
      case 'Total Assets':
        this.displayedMetric = 'Total Assets'
        this.displayedDefinition = 'A key financial metric that indicates the total value of all assets owned by the company. For mature companies this metric is great for evaluating the companies ability to weather a storm, but for young fast growing companies this metric is generally not as useful.'
        break
      case 'Total Liabilities':
        this.displayedMetric = 'Total Liabilities'
        this.displayedDefinition = 'A key financial metric that indicates the total value of all liabilities owed by the company. For mature companies this metric should be low relative to the companies assets, at young unprofitable companies it generally looks worse than it is, unless the company has lost the ability to generate funding.'
        break
      case 'Net Income':
        this.displayedMetric = 'Net Income'
        this.displayedDefinition = 'A key financial metric that indicates the total income generated by the company after deducting all expenses, taxes, and interest. This metric is a concise way to determine profitability, and when compared with revenue, how much of revenue becomes profit.'
        break
      case 'Total Shareholder Equity':
        this.displayedMetric = 'Total Shareholder Equity'
        this.displayedDefinition = 'A key financial metric that indicates the total value of all shareholder equity. This metric is useful for determining how much of the companies assets are owned by shareholders, and how much is owned by debtors.'
        break
      case 'Operating Cashflow':
        this.displayedMetric = 'Operating Cashflow'
        this.displayedDefinition = 'A key financial metric that indicates the total cash generated by the company from its core business operations, so it excludes financing and investing activities.'
        break
      case 'Free Cashflow':
        this.displayedMetric = 'Free Cashflow'
        this.displayedDefinition = 'This metric is the operating cash flow with capital expenditures subtracted, and is a great metric for determining how much cash the company has to invest in growth, pay dividends, or pay down debt.'
        break
      case 'Capital Expenditures':
        this.displayedMetric = 'Capital Expenditures'
        this.displayedDefinition = 'A key financial metric that indicates the total amount of money spent on capital expenditures, which is money spent on investments such as property, plant, and equipment.'
        break
      default :
        break
    }
  }
}
